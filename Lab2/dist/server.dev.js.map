{"version":3,"sources":["server.js"],"names":["http","require","url","https","server","createServer","req","res","parse","pathname","query","setHeader","statusCode","end","searchQuery","q","googleSearchUrl","get","googleRes","responseData","on","chunk","error","message","port","listen","console","log"],"mappings":";;AAAA,IAAMA,IAAI,GAACC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAMC,GAAG,GAACD,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAME,KAAK,GAACF,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAMG,MAAM,GAACJ,IAAI,CAACK,YAAL,CAAkB,UAACC,GAAD,EAAKC,GAAL,EAAW;AAAA,mBACnBL,GAAG,CAACM,KAAJ,CAAUF,GAAG,CAACJ,GAAd,EAAkB,IAAlB,CADmB;AAAA,MACnCO,QADmC,cACnCA,QADmC;AAAA,MAC1BC,KAD0B,cAC1BA,KAD0B;;AAE1C,MAAID,QAAQ,KAAG,GAAf,EAAmB;AACfF,IAAAA,GAAG,CAACI,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACAJ,IAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACAL,IAAAA,GAAG,CAACM,GAAJ,CAAQ,qCAAR;AACD,GAJH,MAIS,IAAIJ,QAAQ,KAAK,SAAjB,EAA4B;AACjC,QAAMK,WAAW,GAAGJ,KAAK,CAACK,CAA1B;;AAEA,QAAI,CAACD,WAAL,EAAkB;AAChBP,MAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACAL,MAAAA,GAAG,CAACM,GAAJ,CAAQ,iCAAR;AACA;AACD;;AACD,QAAMG,eAAe,6CAAsCF,WAAtC,CAArB;AAEAX,IAAAA,KAAK,CAACc,GAAN,CAAUD,eAAV,EAA2B,UAAAE,SAAS,EAAI;AACtC,UAAIC,YAAY,GAAG,EAAnB;AAEAD,MAAAA,SAAS,CAACE,EAAV,CAAa,MAAb,EAAqB,UAAAC,KAAK,EAAI;AAC5BF,QAAAA,YAAY,IAAIE,KAAhB;AACD,OAFD;AAGAH,MAAAA,SAAS,CAACE,EAAV,CAAa,KAAb,EAAoB,YAAM;AACxBb,QAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACAL,QAAAA,GAAG,CAACI,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACAJ,QAAAA,GAAG,CAACM,GAAJ,CAAQM,YAAR;AACD,OAJD;AAKD,KAXD,EAWGC,EAXH,CAWM,OAXN,EAWe,UAAAE,KAAK,EAAI;AACtBf,MAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACAL,MAAAA,GAAG,CAACM,GAAJ,8BAA8BS,KAAK,CAACC,OAApC;AACD,KAdD;AAeD,GAzBM,MAyBA;AACLhB,IAAAA,GAAG,CAACK,UAAJ,GAAiB,GAAjB;AACAL,IAAAA,GAAG,CAACM,GAAJ,CAAQ,YAAR;AACD;;AACD,MAAMW,IAAI,GAAG,IAAb;AACApB,EAAAA,MAAM,CAACqB,MAAP,CAAcD,IAAd,EAAoB,YAAM;AACxBE,IAAAA,OAAO,CAACC,GAAR,kCAAsCH,IAAtC;AACD,GAFD;AAGD,CAvCY,CAAb","sourcesContent":["const http=require('http');\r\nconst url=require('url');\r\nconst https=require('https');\r\n\r\nconst server=http.createServer((req,res)=>{\r\nconst {pathname,query}=url.parse(req.url,true);\r\nif (pathname==='/'){\r\n    res.setHeader('Content-Type', 'text/html');\r\n    res.statusCode = 200;\r\n    res.end('<h1>Welcome to the index page!</h1>');\r\n  } else if (pathname === '/search') {\r\n    const searchQuery = query.q;\r\n\r\n    if (!searchQuery) {\r\n      res.statusCode = 400;\r\n      res.end('Missing search query parameter.');\r\n      return;\r\n    }\r\n    const googleSearchUrl = `https://www.google.com/search?q=${searchQuery}`;\r\n\r\n    https.get(googleSearchUrl, googleRes => {\r\n      let responseData = '';\r\n\r\n      googleRes.on('data', chunk => {\r\n        responseData += chunk;\r\n      });\r\n      googleRes.on('end', () => {\r\n        res.statusCode = 200;\r\n        res.setHeader('Content-Type', 'text/html');\r\n        res.end(responseData);\r\n      });\r\n    }).on('error', error => {\r\n      res.statusCode = 500;\r\n      res.end(`An error occurred: ${error.message}`);\r\n    });\r\n  } else {\r\n    res.statusCode = 404;\r\n    res.end('Not found.');\r\n  }\r\n  const port = 3000;\r\n  server.listen(port, () => {\r\n    console.log(`Server running on port ${port}`);\r\n  });\r\n});"],"file":"server.dev.js"}