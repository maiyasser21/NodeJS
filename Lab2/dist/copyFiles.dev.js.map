{"version":3,"sources":["copyFiles.js"],"names":["fs","require","path","promisify","readFile","writeFile","copyFile","inputFile","outputFile","stat","stats","isFile","console","log","data","outputPath","dirname","outputFileName","basename","outputFilePath","join","args","process","argv","slice","options","i","length","option","value"],"mappings":";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;eACsBA,OAAO,CAAC,MAAD,C;IAArBE,S,YAAAA,S;;AAER,IAAMC,QAAQ,GAAGD,SAAS,CAACH,EAAE,CAACI,QAAJ,CAA1B;AACA,IAAMC,SAAS,GAAGF,SAAS,CAACH,EAAE,CAACK,SAAJ,CAA3B;;AAEA,SAAeC,QAAf,CAAwBC,SAAxB,EAAmCC,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEwBL,SAAS,CAACH,EAAE,CAACS,IAAJ,CAAT,CAAmBF,SAAnB,CAFxB;;AAAA;AAEUG,UAAAA,KAFV;;AAAA,cAGSA,KAAK,CAACC,MAAN,EAHT;AAAA;AAAA;AAAA;;AAIMC,UAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AAJN;;AAAA;AAAA;AAAA,0CAQuBT,QAAQ,CAACG,SAAD,CAR/B;;AAAA;AAQUO,UAAAA,IARV;AASUC,UAAAA,UATV,GASuBb,IAAI,CAACc,OAAL,CAAaR,UAAb,CATvB;AAUUS,UAAAA,cAVV,GAU2Bf,IAAI,CAACgB,QAAL,CAAcV,UAAd,CAV3B;AAWUW,UAAAA,cAXV,GAW2BjB,IAAI,CAACkB,IAAL,CAAUL,UAAV,EAAsBE,cAAtB,CAX3B;AAAA;AAAA,0CAaUZ,SAAS,CAACc,cAAD,EAAiBL,IAAjB,CAbnB;;AAAA;AAeIF,UAAAA,OAAO,CAACC,GAAR,uCAA2CM,cAA3C;AAfJ;AAAA;;AAAA;AAAA;AAAA;AAiBIP,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,IAAMQ,IAAI,GAAGC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,IAAMC,OAAO,GAAG,EAAhB;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,MAAME,MAAM,GAAGP,IAAI,CAACK,CAAD,CAAnB;AACA,MAAMG,KAAK,GAAGR,IAAI,CAACK,CAAC,GAAG,CAAL,CAAlB;AACAD,EAAAA,OAAO,CAACG,MAAD,CAAP,GAAkBC,KAAlB;AACD;;AAED,IAAMtB,SAAS,GAAGkB,OAAO,CAAC,IAAD,CAAzB;AACA,IAAMjB,UAAU,GAAGiB,OAAO,CAAC,IAAD,CAA1B;AAEAnB,QAAQ,CAACC,SAAD,EAAYC,UAAZ,CAAR","sourcesContent":["const fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst { promisify } = require(\"util\");\r\n\r\nconst readFile = promisify(fs.readFile);\r\nconst writeFile = promisify(fs.writeFile);\r\n\r\nasync function copyFile(inputFile, outputFile) {\r\n  try {\r\n    const stats = await promisify(fs.stat)(inputFile);\r\n    if (!stats.isFile()) {\r\n      console.log(\"Input file does not exist or is not a file.\");\r\n      return;\r\n    }\r\n\r\n    const data = await readFile(inputFile);\r\n    const outputPath = path.dirname(outputFile);\r\n    const outputFileName = path.basename(outputFile);\r\n    const outputFilePath = path.join(outputPath, outputFileName);\r\n\r\n    await writeFile(outputFilePath, data);\r\n\r\n    console.log(`File copied successfully to ${outputFilePath}.`);\r\n  } catch (error) {\r\n    console.log(\"An error occurred:\", error);\r\n  }\r\n}\r\n\r\nconst args = process.argv.slice(2);\r\nconst options = {};\r\n\r\nfor (let i = 0; i < args.length; i += 2) {\r\n  const option = args[i];\r\n  const value = args[i + 1];\r\n  options[option] = value;\r\n}\r\n\r\nconst inputFile = options[\"-i\"];\r\nconst outputFile = options[\"-o\"];\r\n\r\ncopyFile(inputFile, outputFile);\r\n"],"file":"copyFiles.dev.js"}