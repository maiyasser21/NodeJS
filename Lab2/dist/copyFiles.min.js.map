{"version":3,"sources":["copyFiles.js"],"names":["fs","require","path","promisify","readFile","writeFile","copyFile","inputFile","outputFile","data","outputPath","outputFileName","outputFilePath","regeneratorRuntime","async","_context","prev","next","awrap","stat","sent","isFile","console","log","abrupt","dirname","basename","join","concat","t0","stop","args","process","argv","slice","options","i","length","option","value"],"mappings":"aAAA,IAAMA,GAAKC,QAAQ,MACbC,KAAOD,QAAQ,iBADrBA,QAAA,QAAQE,mBAAAA,UACFD,SAAOD,UAAbD,GAAAI,UAIMC,UAAYF,UAAUH,GAAGK,WAE/B,SAAeC,SAASC,EAAWC,GAAnC,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAH0Bf,UAAIC,GAA9Be,KAA0BhB,CAA1BI,IAGA,KAAA,EAAA,GAAAQ,EAAAK,KAFeC,SAEf,CAAAN,EAAAE,KAAA,EAAA,MAAA,OAIMK,QAAQC,IAAI,+CAJlBR,EAAAS,OAAA,UAAA,KAAA,EAAA,OAAAT,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAd,SAAAG,IAAA,KAAA,EAAA,OAAAE,EAAAM,EAAAK,KAAAV,EAAAR,KAAAuB,QAAAjB,GAAAG,EAAAT,KAAAwB,SAAAlB,GAAAI,EAAAV,KAAAyB,KAAAjB,EAAAC,GAAAI,EAAAE,KAAA,GAAAJ,mBAAAK,MAAAb,UAAAO,EAAAH,IAAA,KAAA,GAAAa,QAAAC,IAAA,+BAAAK,OAAAhB,EAAA,MAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,MAAA,GAiBIO,QAAQC,IAAI,qBAAZR,EAAAc,IAjBJ,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAe,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAA,IAAA,IAAAC,KAAAC,QAAAC,KAAAC,MAAA,GAsBMC,QAAU,GAtBhBC,EAAA,EAAAA,EAAAL,KAAAM,OAAAD,GAAA,EAAA,CAyBE,IAAME,OAASP,KAAKK,GAzBtBG,MAAAR,KAAAK,EAAA,GAAAD,QAAAG,QAAAC,MAAA,IAAAhC,UAAA4B,QAAA,MAQU1B,WARV0B,QAAA,MAUUxB,SAAAA,UAAAA","file":"copyFiles.min.js","sourcesContent":["const fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst { promisify } = require(\"util\");\r\n\r\nconst readFile = promisify(fs.readFile);\r\nconst writeFile = promisify(fs.writeFile);\r\n\r\nasync function copyFile(inputFile, outputFile) {\r\n  try {\r\n    const stats = await promisify(fs.stat)(inputFile);\r\n    if (!stats.isFile()) {\r\n      console.log(\"Input file does not exist or is not a file.\");\r\n      return;\r\n    }\r\n\r\n    const data = await readFile(inputFile);\r\n    const outputPath = path.dirname(outputFile);\r\n    const outputFileName = path.basename(outputFile);\r\n    const outputFilePath = path.join(outputPath, outputFileName);\r\n\r\n    await writeFile(outputFilePath, data);\r\n\r\n    console.log(`File copied successfully to ${outputFilePath}.`);\r\n  } catch (error) {\r\n    console.log(\"An error occurred:\", error);\r\n  }\r\n}\r\n\r\nconst args = process.argv.slice(2);\r\nconst options = {};\r\n\r\nfor (let i = 0; i < args.length; i += 2) {\r\n  const option = args[i];\r\n  const value = args[i + 1];\r\n  options[option] = value;\r\n}\r\n\r\nconst inputFile = options[\"-i\"];\r\nconst outputFile = options[\"-o\"];\r\n\r\ncopyFile(inputFile, outputFile);\r\n"]}